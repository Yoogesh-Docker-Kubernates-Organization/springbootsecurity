########################################################################################################
#Persistence Volume Claim and Persistence Volume
######################################################################################################## 

#What do we want
apiVersion: v1
kind: PersistentVolumeClaim

metadata:
  name: yoogesh-pvc
    
spec:
  storageClassName: cloud-ssd
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      #Mysql says hey i need 20Gi storage. hey kubernates can you please fulfill it please.
      #Kubernates will dynamically allocated the storage with not less than 20Gi
      storage: 20Gi
  
---    

#What do we want it to be implemneted
apiVersion: storage.k8s.io/v1
kind: StorageClass

metadata:
  name: cloud-ssd
  
provisioner: kubernetes.io/aws-ebs
    
parameters:
  type: io1
  iopsPerGB: "10"
  fsType: ext4
  
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: yoogeshmysql
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: yoogeshmysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
        - name: MYSQL_DATABASE
          value: myDatabase
        volumeMounts:
          - name: yoogesh-mysql-persistence
            mountPath: /var/lib/mysql
      volumes:
        - name: yoogesh-mysql-persistence
          # pointer to the configuration of HOW we want the mount to be implemented
          persistentVolumeClaim:
            claimName: yoogesh-pvc
                  
---

kind: Service
apiVersion: v1
metadata:
  name: yoogesh-database
spec:
  selector:
    app: yoogeshmysql
  ports:
  - port: 3306
  type: ClusterIP
  
---






########################################################################################################
# This is Cluster Based Authentication (CBAC) to privide an access for Spring cloud kubernetes
######################################################################################################## 

apiVersion: rbac.authorization.k8s.io/v1

kind: ClusterRole

metadata: 
  namespace: default
  name: spring-roles
  
rules:

- apiGroups: [""] # Indicates the core API Group
  resources: ["pods","configmaps"]
  verbs: ["get", "list", "watch"]


---

apiVersion: rbac.authorization.k8s.io/v1

kind: ClusterRoleBinding

metadata:
  name: ALLOW_SPRING_TO_ACCESS_CLUSTER

subjects:

- kind: ServiceAccount
  name: default
  namespace: default
  
roleRef:
  kind: ClusterRole
  name: spring-roles
  apiGroup: rbac.authorization.k8s.io


    
---


########################################################################################################
# This is to test whether the Ingress controller is working or not. we are using httpd service here.
######################################################################################################## 

apiVersion: apps/v1

kind: Deployment

metadata:
  name: http-server
  
spec:
  selector:
    matchLabels:
      mylabelName: yoogeshHttpd
      
  replicas: 1
  
  template:
    metadata:
      labels:
        mylabelName: yoogeshHttpd
        
    spec:
      containers:
      - name: http-server
        image: httpd

---

apiVersion: v1

kind: Service

metadata:
  name: yoogesh-httpd-cluster
  
spec:
  selector:
    mylabelName: yoogeshHttpd
    
  ports:
    - name: http
      port: 80

  type: ClusterIP
